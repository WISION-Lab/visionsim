import re

from tqdm.auto import tqdm


class StreamWatcherTqdmPbar:
    r"""Watch the streams generated by a `c.run` call and update a progress bar when
    something in the stream matches the regex `pattern`. If the pattern has a named
    group with the name 'n' (i.e: something like '(?P<n>\d+)'), we set the progress
    bar to that value, any other match simply increments the progressbar by a tick.
    """

    def __init__(self, pattern, description="Processing...", on_match=None, **pbar_kwargs):
        self.pattern = pattern
        self.description = description
        self.on_match = on_match or {}
        self.pbar_kwargs = pbar_kwargs
        self.pbar = None
        self.index = 0

    def __enter__(self):
        self.pbar = tqdm(**self.pbar_kwargs)
        self.pbar.set_description(self.description)
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.pbar.close()

    def submit(self, stream):
        # Only look at stream contents we haven't seen yet, to avoid dupes.
        new_ = stream[self.index :]

        # Allow for arbitrary callbacks if a specific match is found
        for pattern, on_match_callback in self.on_match.items():
            matches = re.search(pattern, new_, re.DOTALL)

            if matches:
                on_match_callback(matches)

        # Search, across lines if necessary
        matches = re.search(self.pattern, new_, re.DOTALL)

        # Update seek index and progress bar if we've matched
        if matches:
            if n := matches.groupdict().get("n"):
                self.pbar.n = int(n)
                self.pbar.last_print_n = int(n)
            else:
                self.pbar.update(1)
            self.pbar.refresh()
            self.index += len(new_)
        return []
